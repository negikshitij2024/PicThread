import { type ClassValue, clsx } from "clsx";
import { ReceiptPoundSterling } from "lucide-react";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

//made by me
export function timeAgo(threadDate:Date):string{
  const currentDate=new Date()
  if(threadDate.getFullYear()==currentDate.getFullYear()){
    if(threadDate.getMonth()==currentDate.getMonth()){
      if(threadDate.getDate()==currentDate.getDate()){
        return `${currentDate.getHours()-threadDate.getHours()} hours ago`
        
      }
      else{
        return `${currentDate.getDate()-threadDate.getDate()} days ago`
      }
    }
    else{
      return `${currentDate.getMonth()-threadDate.getMonth()} month ago`
    }
  }
  else{
    return `${currentDate.getFullYear()-threadDate.getFullYear()} year ago`
  }
}